#!/bin/bash

echo " train airstore.sh "
echo " ablationcamerasinglegpu or ablationcamera or debugprefetch :" $1
echo " holdoutpath :" $2
echo " holdoutratio :" $3
echo " $(hostname) rank ${SLURM_PROCID} $(env | grep KRB5)"
echo " SLARUMARRAYCMDFILEPATH: "${SLURMARRAYCMDFILEPATH}

echo $PWD

if [ ! -f ${RSC_RUN_SLURM_SNAPSHOT_DIR}/config.py ]
then
    echo ${RSC_RUN_SLURM_SNAPSHOT_DIR}/config.py "not found"
    exit
fi

if [ ! -d ${RSC_EXP_RUN_BASE_DIR} ]
then
    echo ${RSC_EXP_RUN_BASE_DIR} "not found"
    exit
fi



#RUN_DIR=${RSC_EXP_RUN_BASE_DIR}/${SLURM_NODEID}/${SLURM_LOCALID}
#RUN_DIR=${RSC_EXP_RUN_BASE_DIR}/${SLURM_ARRAY_TASK_ID}/${SLURM_NODEID}/${SLURM_LOCALID}  # for slurm array commnd, add one more directory level

RUN_DIR=${RSC_EXP_RUN_BASE_DIR}/slurmarray-task-id-${SLURM_ARRAY_TASK_ID}/${SLURM_NODEID}/${SLURM_LOCALID}

export RSC_RUN_DIR=$RUN_DIR

export RSC_EXP_RUN_BASE_DIR=${RSC_EXP_RUN_BASE_DIR}/slurmarray-task-id-${SLURM_ARRAY_TASK_ID}

hostname

mkdir -p ${RUN_DIR}

# DONT DO THIS -- the slowest one could delete the fast runner's log file and cause IO error
#rm -rf ${RUN_DIR}/log-r*.txt


echo "@@@@@@ UPDATED RSC_EXP_RUN_BASE_DIR : " ${RSC_EXP_RUN_BASE_DIR} # to support slurm array task

echo "RUN DIR : " ${RUN_DIR}
ls -althr  ${RUN_DIR}

RUN_CONFIG=${RSC_CONFIG_DIR}/config.py

echo "RUN CONFIG :"
echo ${RUN_CONFIG}

echo "SLURM LOCAL ID " ${SLURM_LOCALID}
echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ SLURM RANK " ${SLURM_PROCID}

export MKL_NUM_THREADS=
export NUMEXPR_NUM_THREADS=1
export OMP_NUM_THREADS=1
export OPENBLAS_NUM_THREADS=1
export VECLIB_MAXIMUM_THREADS=1

# handling program arguments in bash script is not fun. Pass the sbatch arguments to python program directly. Since this argument is generated by sbatch, arugment sanity checking can be done in sbatch.py if necessary
# args=""
# for a in "$@";do
#     echo $a
#     args=$args" "$a
# done

#cmdfile=/home/jinkyuk/array-cmds/cmd-10.txt
cmdfile=${SLURMARRAYCMDFILEPATH}

echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ COMMAND FILE : " $cmdfile
args=`head -n $((SLURM_ARRAY_TASK_ID+1)) $cmdfile | tail -n 1`

echo "@@@@@ srun_wrapper : program name: " ${RSC_PROGRAM_NAME} " arguments " $args "SLURM LOCAL ID" ${SLURM_LOCALID} "SLURM PROC ID" $SLURM_PROCID
echo " @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
echo " @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ARGS IN SRUN_WRAPPER: " $args
echo " @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"

CUDA_VISIBLE_DEVICES=${SLURM_LOCALID} python3 ${RSC_RUN_SLURM_SNAPSHOT_DIR}/${RSC_PROGRAM_NAME} ${RUN_CONFIG} $args

# if [[ ! -z "$31" ]] && [[ "$1" == "--debugprefetch" ]]; then
#     echo "DEBUG PREFETCH srun_wrapper.sh"
#     CUDA_VISIBLE_DEVICES=${SLURM_LOCALID} python ${RSC_RUN_SLURM_SNAPSHOT_DIR}/ddp-train.py ${RUN_CONFIG} --debugprefetch
# elif [[ ! -z "$1" ]] && [[ "$1" == "--ablationcamera" ]]; then
#     echo "ABLATION CAMERA in srun_wrapper.sh "
#     CUDA_VISIBLE_DEVICES=${SLURM_LOCALID} python ${RSC_RUN_SLURM_SNAPSHOT_DIR}/ddp-train.py ${RUN_CONFIG} --holdoutratio $2
# elif [[ ! -z "$1" ]] && [[ "$1" == "--ablationcamerasinglegpu" ]]; then
#     echo "ABLATION CAMERA SINGLE GPU RUN in srun_wrapper.sh "
#     CUDA_VISIBLE_DEVICES=${SLURM_LOCALID} python ${RSC_RUN_SLURM_SNAPSHOT_DIR}/ddp-train.py ${RUN_CONFIG} --ablationcamera --holdoutpath $2 --holdoutratio $3
# else
#     echo "PLAIN  in srun_wrapper.sh "
#     CUDA_VISIBLE_DEVICES=${SLURM_LOCALID} python ${RSC_RUN_SLURM_SNAPSHOT_DIR}/ddp-train.py ${RUN_CONFIG}
# fi
